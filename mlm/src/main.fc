#include "operations/upgrade_code";
#include "operations/transfer";
#include "utils";

() dump_int(int value) impure {
}
() dump_cell(cell c) impure {
}
() dump_slice(slice s) impure {
}

() recv_external(slice in_msg) {
  var signature = in_msg~load_bits(512);
  var msg_hash = slice_hash(in_msg);
  var seqno = in_msg~load_uint(32);

  ;; data contains seqno + public_key
  var ds = begin_parse(get_data());
  var (stored_seqno, public_key) = (ds~load_uint(32), ds~load_uint(256));
  ;; prevent replay
  throw_unless(33, stored_seqno == seqno);
  throw_unless(34, check_signature(msg_hash, signature, public_key));
  accept_message();

  var action = in_msg~load_uint(4);
  if (action == 1) {
    Op::upgrade_code(in_msg);
  } elseif (action == 2) {
  }

  var skip = ds~load_uint(3); ;; TODO ~load_msg_addr()
  var source_workchain = ds~load_int(8);
  var source_address = ds~load_uint(256);
  set_data(
    begin_cell()
      .store_uint(stored_seqno + 1, 32)
      .store_uint(public_key, 256)
      .store_uint(skip, 3)
      .store_int(source_workchain, 8)
      .store_int(source_address, 256)
    .end_cell()
  );
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) {
  var cs = in_msg_cell.begin_parse();
  var flags = cs~load_uint(4);  ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
  if (flags & 1) {
    ;; ignore all bounced messages
    return ();
  }
  if (in_msg.slice_empty?()) {
    return ();
  }

  var op = in_msg~load_uint(32);
  if (op == 0) {
    return Op::transfer(in_msg, msg_value);
  }
}

int seqno() method_id {
  return get_data().begin_parse().preload_uint(32);
}

_ source_address() method_id {
  return get_source_address();
}
